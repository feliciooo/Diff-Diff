import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class RenturaLabExer5B {

    public static void main(String[] args) {
        Question question1 = new Question(" Who is the current NBA Most Valuable Player (MVP)?");
        question1.addAnswer('A', " LeBron James", false);
        question1.addAnswer('B', " Nikola Jokic", true);
        question1.addAnswer('C', " Luka Doncic", false);

        Question question2 = new Question(" Who is the NBA All - Time Leading Scorer?");
        question2.addAnswer('A', " LeBron James", true);
        question2.addAnswer('B', " Michael Jordan", false);
        question2.addAnswer('C', " Kobe Bryant", false);

        Question question3 = new Question(" Who is the all-time leader in 3-pointers made in the NBA?");
        question3.addAnswer('A', " Ray Allen", false);
        question3.addAnswer('B', " Reggie Miller", false);
        question3.addAnswer('C', " Stephen Curry", true);

        Question question4 = new Question(" Who is the all-time leader in triple-doubles in the NBA?");
        question4.addAnswer('A', " Oscar Robertson", false);
        question4.addAnswer('B', " Russel Westbrook", true);
        question4.addAnswer('C', " Steve Nash", false);

        Question question5 = new Question(" How many NBA championships have the Chicago Bulls won?");
        question5.addAnswer('A', " 6", true);
        question5.addAnswer('B', " 8", false);
        question5.addAnswer('C', " 10", false);

        Question question6 = new Question(" Who was the MVP of the 2020 NBA Finals?");
        question6.addAnswer('A', " Jimmy Butler", false);
        question6.addAnswer('B', " Anthony Davis", false);
        question6.addAnswer('C', " LeBron James", true);

        Question question7 = new Question(" The 1996 Bulls set the regular season win total record of 72. Which team broke this record?");
        question7.addAnswer('A', " 2020 Los Angeles Lakers", false);
        question7.addAnswer('B', " 2016 Golden State Warriors", true);
        question7.addAnswer('C', " 2012 Miami Heat", false);

        Question question8 = new Question(" Which San Antonio Spurs legend was nicknamed “The Admiral”?");
        question8.addAnswer('A', " Tony Parker", false);
        question8.addAnswer('B', " Tim Duncan", false);
        question8.addAnswer('C', " David Robinson", true);

        Question question9 = new Question(" Which team blew a 3-1 lead in the 2016 NBA finals?");
        question9.addAnswer('A', " Cleveland Cavaliers", false);
        question9.addAnswer('B', " Golden State Warriors", true);
        question9.addAnswer('C', " Houston Rockets", false);

        Question question10 = new Question(" Who was the #1 overall pick in the 2003 NBA draft?");
        question10.addAnswer('A', " LeBron James", true);
        question10.addAnswer('B', " Dwyane Wade", false);
        question10.addAnswer('C', " Carmelo Anthony", false);

        Question[] questions = {
                question1,
                question2,
                question3,
                question4,
                question5,
                question6,
                question7,
                question8,
                question9,
                question10
        };

        int score = 0;
        int i = 0;
        Scanner scanner = new Scanner(System.in);
        while (i < 10) {
            System.out.print(i+1 + ". ");
            System.out.println(questions[i]);
            System.out.print("Enter your answer -> ");

            String userAnswer = scanner.nextLine();
            try {
                validateBlank(userAnswer);
                validateNumberOrAnySpecialCharacter(userAnswer);
                validateIsNotABC(userAnswer);

                char answer = userAnswer.toUpperCase().charAt(0);
                if (questions[i].isCorrectAnswer(answer)){
                
                    score++;
                
                } 
                i++;{
                
                
            }
            } catch (UserAnswerIsBlankException | UserAnswerIsNumberOrAnySpecialCharacterException | UserAnswerIsNotABCCharacterException e) {
                System.out.println("Answer is not allowed. \n");
            }
        }
            System.out.println("Your score is: " + score);
    }

    private static void validateBlank(String userAnswer) {
        if (userAnswer.isBlank()) {
            throw new UserAnswerIsBlankException();
        }
    }

    private static void validateNumberOrAnySpecialCharacter(String userAnswer) {
        Character character = userAnswer.charAt(0);
        if ((character < 'A' || character > 'Z') && (character < 'a' || character > 'z')) {
            throw new UserAnswerIsNumberOrAnySpecialCharacterException();
        }
    }

    private static void validateIsNotABC(String userAnswer) {
        Character character = userAnswer.toUpperCase().charAt(0);
        if ((character < 'A' || character > 'C')) {
            throw new UserAnswerIsNotABCCharacterException();
        }
    }


}

class Question {
    private String question;
    private Map<Character, Answer> answers = new HashMap<>();

    public Question(String question) {
        this.question = question;
    }

    public void addAnswer(Character character, String answer, boolean isCorrect) {
        answers.put(character, new Answer(answer, isCorrect));
    }

    public boolean isCorrectAnswer(Character character) {
        Answer answer = answers.get(character);
        return answer.isCorrect();
    }

    @Override
    public String toString() {
        return question
                + " \n A:" + answers.get('A')
                + " \n B:" + answers.get('B')
                + " \n C:" + answers.get('C');
    }
}

class Answer {
    private String answer;
    private boolean isCorrect;

    public Answer(String answer, boolean isCorrect) {
        this.answer = answer;
        this.isCorrect = isCorrect;
    }

    public boolean isCorrect() {
        return isCorrect;
    }

    @Override
    public String toString() {
        return answer;
    }
}

class UserAnswerIsBlankException extends RuntimeException {
}

class UserAnswerIsNotABCCharacterException extends RuntimeException {
}

class UserAnswerIsNumberOrAnySpecialCharacterException extends RuntimeException {
}
